<script>
  //Get the list of queue_codes
  var current_queues = [{% for queue in viewer.getAllQueues() %}
      "{{queue['id']}}",
    {% endfor %}]
  current_queues = Array.from(new Set(current_queues));

  //checks if the filter settings are in local storage
  if (!localStorage.getItem('office_hour_queue_filters')) {
    localStorage.setItem('office_hour_queue_filters', "{}");
  }

  var timers = []; //keep track of the current running timers on the page

  //Runs the function that gets and fills in the old filter settings
  {% if viewer.isGrader() %}
    filterQueues();
  {% endif %}

  //Unide the checkboxes now that they have been set
  $(".page_loading").removeClass("page_loading");

  //Run this every time a checkbox has been clicked to update the list of filtered queues
  function updateQueueFilter(queue_code) {
    var filters = JSON.parse(localStorage.getItem('office_hour_queue_filters'))
    filters[queue_code] = document.getElementById('queue_filter_' + queue_code).checked;
    localStorage.setItem('office_hour_queue_filters', JSON.stringify(filters));
    filterQueues();
  }

  //Goes through the filter settings from local storage Hides and unhides rows of the queue based on the filter settings
  function filterQueues() {
    var filter_choices = JSON.parse(localStorage.getItem('office_hour_queue_filters'))
    for (var i = 0; i < current_queues.length; i++) {
      if (filter_choices[current_queues[i]] != false) {
        $("#queue_filter_" + current_queues[i]).prop("checked", true);
        filter_choices[current_queues[i]] = true;
      }
      if (filter_choices[current_queues[i]]) {
          document.getElementById('queue_filter_' + current_queues[i]).parentElement.classList.remove("fully-transparent");
      }
      else {
          document.getElementById('queue_filter_' + current_queues[i]).parentElement.classList.add("fully-transparent");
      }
    }
    localStorage.setItem('office_hour_queue_filters', JSON.stringify(filter_choices));

    timers = []
    for (var index in Object.keys(filter_choices)) {
      let key = Object.keys(filter_choices)[index];
      if (filter_choices[key]) {
        let current_elements = $(".queue_current_" + key);

        current_elements.addClass("shown_queue_row");

        current_elements.show();
        current_elements.each(function(i, obj) {
          let timer = $(obj).find(".help_timer")
          if (timer) {
            timers.push([
              timer,
              new Date(timer.attr("help_time"))
            ]);
          }
        });
      } else {
        let current_elements = $(".queue_current_" + key);
        current_elements.hide();
        current_elements.removeClass("shown_queue_row");
      }
    }
    updateTimers();

    var queue_rows = document.getElementsByClassName('shown_queue_row');
    var row_count = 0;
    var real_row_count = 0;
    for (; row_count < queue_rows.length; row_count++) {
      if(queue_rows[row_count].classList.contains('contact_info')){
        continue;
      }
      queue_rows[row_count].childNodes[1].innerHTML = real_row_count + 1;
      real_row_count++;
    }
    if (queue_rows.length === 0) {
      $("#queue_empty_msg").show();
    } else {
      $("#queue_empty_msg").hide();
    }
  }

  function unhideId(element, id) {
    element.parentElement.innerHTML = id;
  }

  //update the timers few seconds
  updateTimers();
  setInterval(updateTimers, 1000);
  function updateTimers() {
    for (var i = 0; i < timers.length; i++) {
      timer = (new Date() - timers[i][1]) / 1000
      var min = Math.floor(timer / 60)
      var sec = Math.floor(timer % 60).toString().padStart(2, '0')
      var timerstring = min + ":" + sec;
      if (min >= 100) {
        timerstring = "âˆž";
      }
      timers[i][0].html(timerstring);
    }
  }

  function genRandCode(id) {
    var result = '';
    var characters = 'ABCDEFGHJKMNPQRSTUVWXYZ23456789';
    var charactersLength = characters.length;
    for (var i = 0; i < 6; i++) {
      result += characters.charAt(Math.floor(Math.random() * charactersLength));
    }
    $('#' + id).val(result);
  }


  {% if viewer.isGrader() %}

      $('#old_queue_code').change(function(){
          document.getElementById('change_queue_token').action = '{{base_url}}/'+this.value+'/change_token';
      });

      var notifications_enabled = localStorage.getItem('office_hour_queue_notifications') === "true";
      if ("Notification" in window && Notification.permission === "granted" && notifications_enabled) {
          setNotificationState(true);
      }else{
          setNotificationState(false);
      }
  {% endif %}

  function setNotificationState(turnOn){
    notifications_enabled = turnOn;
    localStorage.setItem('office_hour_queue_notifications', turnOn ? "true":"false");
    $('#notification_btn').html(turnOn ? "Disable Notifications":"Enable Notifications");
  }

  function enableNotifications() {
    if(notifications_enabled){
      setNotificationState(false);
      return;
    }

    if (!("Notification" in window)) {
      alert("This browser does not support desktop notification");
    }
    else if (Notification.permission === "granted") {
      new Notification("Notifications have been enabled. You will be notified only when somebody joins the queue and there was nobody previously waiting for help.");
      setNotificationState(true);
    }
    else if (Notification.permission !== "denied") {
      Notification.requestPermission().then(function (permission) {
        if (permission === "granted") {
          new Notification("Notifications have been enabled. You will be notified only when somebody joins the queue and there was nobody previously waiting for help.");
          setNotificationState(true);
        }else{
          setNotificationState(false);
        }
      });
    }
  }

  initSocketClient();

  function initSocketClient() {
      window.socketClient = new WebSocketClient();
      window.socketClient.onmessage = (msg)=>{
          switch (msg.type) {
            case "queue_update":
                {% if viewer.isGrader() %}
                    updateCurrentQueue();
                {% endif %}
                break;
            case "toggle_queue":
                {% if not viewer.isGrader() %}
                    updateQueueStatus();
                {% endif %}
                break;
            case "queue_status_update":
                {% if viewer.isGrader() %}
                    updateCurrentQueue();
                {% else %}
                    updateQueueStatus();
                {% endif %}
                break;
            case "full_update":
                {% if viewer.isGrader() %}
                    updateCurrentQueue();
                {% else %}
                    updateQueueStatus();
                {% endif %}
                updateHistory();
                break;
            case "announcement_update":
                updateAnnouncement();
                break;
            default:
                console.log("Unknown message received.");
                break;
          }
      };
      window.socketClient.open('office_hours_queue');
  }

  {% if viewer.isGrader() %}
    window.isAudibleAlertEnabled = false;

    try {
        window.notificationSound = new NotificationSound();
        document.querySelector('.disable-audible').style.display = 'none';
        document.querySelector('.enable-audible').style.display = 'inline-block';
    } catch (e) {
        console.error(e);
    }
  {% endif %}

  function toggleAudibleAlert() {
      if (window.isAudibleAlertEnabled) {
          document.querySelector('.disable-audible').style.display = 'none';
          document.querySelector('.enable-audible').style.display = 'inline-block';
          window.isAudibleAlertEnabled = false;
      }
      else {
          document.querySelector('.disable-audible').style.display = 'inline-block';
          document.querySelector('.enable-audible').style.display = 'none';
          window.isAudibleAlertEnabled = true;
      }
  }

  function updateCurrentQueue() {
      $.get("{{base_url}}/current_queue", function(newQueue) {
          $("#current_queue").replaceWith(newQueue);
          filterQueues();
      });

      if (window.isAudibleAlertEnabled) {
          window.notificationSound.play();
      }
  }

  function updateQueueStatus() {
      $.get("{{base_url}}/new_status", function(newStatus) {
          if ($('#queue_status').length !== 0)
              $("#queue_status").replaceWith(newStatus);
          else $("#add_to_queue").replaceWith(newStatus);
      });
  }

  function updateHistory() {
      $.get("{{base_url}}/queue_history?full_history={{viewer.getFullHistory() ? 'true' : 'false'}}", function(newHistory) {
          $("#queue_history").replaceWith(newHistory);
      });
  }

  function updateAnnouncement() {
      $.get("{{base_url}}/new_announcement", function(newAnnouncement) {
          if ($('#announcement').length > 0) {
              $('#announcement').replaceWith(newAnnouncement);
          }
          else $(newAnnouncement).insertAfter($('h1').next());
      });
  }

  function toggleQueue(index, code){
      $.post( `{{base_url}}/${code}/toggle`, {
          csrf_token: '{{ csrf_token }}',
          queue_code: code,
          queue_state: $(`#toggle-queue-${index}`)[0].checked ? 0:1
      });
  }

</script>
</div>
